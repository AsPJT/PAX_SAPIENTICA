cmake_minimum_required(VERSION 3.16)
project(PAX_SAPIENTICA)
include(CTest)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

if(MSVC)
    if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    endif()
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Od")
    elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
    endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-long-long -pedantic")
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")
    elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
    endif()
endif()

# os
if(APPLE)
    set(OS "macOS")
elseif(UNIX)
    set(OS "Ubuntu")
elseif(WIN32)
    set(OS "Windows")
else()
    message(FATAL_ERROR "Unsupported OS")
endif()

if(WIN32 OR APPLE)
    set(SFML_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/MapViewer/${OS}/SFML_3.0.0")
    list(APPEND CMAKE_PREFIX_PATH "${SFML_ROOT_DIR}/lib/cmake/SFML")
elseif(UNIX)
    set(SFML_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/MapViewer/${OS}/SFML")
endif()
find_package(SFML 3.0 COMPONENTS Graphics)

if(SFML_FOUND)
    include_directories(${SFML_ROOT_DIR}/include)
else()
    message(FATAL_ERROR "SFML not found. Please install SFML 3.0 or set SFML_ROOT_DIR correctly.")
endif()

add_subdirectory(IncludeTest)
add_subdirectory(IntegrationTest)
add_subdirectory(MapViewer)
add_subdirectory(UnitTest)
